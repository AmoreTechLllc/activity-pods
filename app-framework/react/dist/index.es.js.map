{"mappings":"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","sources":["src/index.ts","src/components/BackgroundChecks.tsx","src/components/PodLoginPage.tsx","src/components/RedirectPage.tsx"],"sourcesContent":["// Components\nexport { default as BackgroundChecks } from './components/BackgroundChecks';\nexport { default as PodLoginPage } from './components/PodLoginPage';\nexport { default as RedirectPage } from './components/RedirectPage';\n","import { useCallback, useEffect, useState, useLayoutEffect, FunctionComponent, ReactNode } from 'react';\nimport urlJoin from 'url-join';\nimport { useGetIdentity, useNotify } from 'react-admin';\nimport { useNodeinfo } from '@semapps/activitypub-components';\nimport type { AppStatus } from '../types';\n\n/**\n * Call the /.well-known/app-status endpoint to check the status of the app\n * If the app backend is offline, display an error message\n * If the app need to be upgraded, redirect the user to the /authorize page\n */\nconst BackgroundChecks: FunctionComponent<Props> = ({ clientId, children }) => {\n  const { data: identity, isLoading: isIdentityLoading } = useGetIdentity();\n  const notify = useNotify();\n  const [appStatus, setAppStatus] = useState<AppStatus | undefined>();\n  const nodeinfo = useNodeinfo(identity?.id ? new URL(identity?.id as string).host : undefined);\n\n  const isLoggedOut = !isIdentityLoading && !identity?.id;\n\n  const checkAppStatus = useCallback(async () => {\n    // Only proceed if the tab is visible\n    if (!document.hidden && identity?.id) {\n      const oidcIssuer = new URL(identity?.id as 'string').origin;\n      const endpointUrl = urlJoin(oidcIssuer, '.well-known/app-status');\n      const token = localStorage.getItem('token');\n\n      try {\n        // Don't use dataProvider.fetch as it would go through the proxy\n        const response = await fetch(endpointUrl, {\n          headers: new Headers({ Authorization: `Bearer ${token}`, Accept: 'application/json' })\n        });\n        if (response.ok) {\n          const appStatus = (await response.json()) as AppStatus;\n          if (appStatus) {\n            setAppStatus(appStatus);\n            if (!appStatus.onlineBackend) {\n              notify(`The app backend is offline`, { type: 'error' });\n            } else if (!appStatus.installed) {\n              notify(`The app is not installed`, { type: 'error' });\n            } else if (appStatus.upgradeNeeded) {\n              const consentUrl = new URL(nodeinfo?.metadata?.consent_url as 'string');\n              consentUrl.searchParams.append('client_id', clientId);\n              consentUrl.searchParams.append('redirect', window.location.href);\n              window.location.href = consentUrl.toString();\n            }\n          }\n        }\n      } catch (e) {\n        notify(`Unable to check app status`, { type: 'error' });\n      }\n    }\n  }, [identity, nodeinfo, setAppStatus, document]);\n\n  useEffect(() => {\n    if (identity?.id && nodeinfo) {\n      checkAppStatus();\n      const timerId = setInterval(checkAppStatus, 120000);\n      return () => clearInterval(timerId);\n    }\n  }, [identity, nodeinfo, checkAppStatus]);\n\n  useLayoutEffect(() => {\n    document.addEventListener('visibilitychange', checkAppStatus);\n    return () => document.removeEventListener('visibilitychange', checkAppStatus);\n  }, [checkAppStatus]);\n\n  // TODO display error message instead of notifications\n  if (\n    isLoggedOut ||\n    (appStatus?.onlineBackend === true && appStatus?.installed === true && appStatus?.upgradeNeeded === false)\n  ) {\n    return children;\n  } else {\n    return null;\n  }\n};\n\ntype Props = {\n  clientId: string;\n  children: ReactNode;\n};\n\nexport default BackgroundChecks;\n","import React, { FunctionComponent, Fragment, useEffect, useState } from 'react';\nimport { useNotify, useLocaleState, useTranslate, useLogin, useLogout, useGetIdentity, useRedirect } from 'react-admin';\nimport { useSearchParams } from 'react-router-dom';\nimport {\n  Box,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemText,\n  ListItemAvatar,\n  Avatar,\n  Divider,\n  Card,\n  Typography\n} from '@mui/material';\nimport LockIcon from '@mui/icons-material/Lock';\nimport StorageIcon from '@mui/icons-material/Storage';\nimport type { PodProvider } from '../types';\n\n/**\n * Display a list of Pod providers that we can log in\n * This list is taken from the https://activitypods.org/data/pod-providers endpoint\n * It is possible to replace it with a custom list of Pod providers\n */\nconst PodLoginPageView: FunctionComponent<Props> = ({ text, customPodProviders }) => {\n  const notify = useNotify();\n  const [searchParams] = useSearchParams();\n  const [locale] = useLocaleState();\n  const login = useLogin();\n  const logout = useLogout();\n  const translate = useTranslate();\n  const redirect = useRedirect();\n  const { data: identity, isLoading: isIdentityLoading } = useGetIdentity();\n  const [podProviders, setPodProviders] = useState<[PodProvider]>(customPodProviders || []);\n  const isSignup = searchParams.has('signup');\n  const redirectUrl = searchParams.get('redirect');\n\n  useEffect(() => {\n    (async () => {\n      if (podProviders.length < 1) {\n        const results = await fetch('https://activitypods.org/data/pod-providers', {\n          headers: {\n            Accept: 'application/ld+json'\n          }\n        });\n        if (results.ok) {\n          const json = await results.json();\n          // Filter POD providers by available locales\n          const podProviders = json['ldp:contains'].filter((provider: PodProvider) =>\n            Array.isArray(provider['apods:locales'])\n              ? provider['apods:locales'].includes(locale)\n              : provider['apods:locales'] === locale\n          );\n          setPodProviders(podProviders);\n        } else {\n          notify('auth.message.pod_providers_not_loaded', { type: 'error' });\n        }\n      }\n    })();\n  }, [podProviders, setPodProviders, notify, locale]);\n\n  useEffect(() => {\n    if (searchParams.has('iss')) {\n      // Automatically login if Pod provider is known\n      login({ issuer: searchParams.get('iss') });\n    } else if (searchParams.has('logout')) {\n      logout({ redirectUrl });\n    } else if (!isIdentityLoading && identity?.id) {\n      redirect('/');\n    }\n  }, [searchParams, login, logout, identity, isIdentityLoading, redirect, redirectUrl]);\n\n  if (isIdentityLoading) return null;\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n      <Card\n        sx={{\n          minWidth: 300,\n          maxWidth: 350,\n          marginTop: '6em'\n        }}\n      >\n        <Box\n          sx={{\n            margin: '1em',\n            display: 'flex',\n            justifyContent: 'center'\n          }}\n        >\n          <Avatar>\n            <LockIcon />\n          </Avatar>\n        </Box>\n        <Box pl={2} pr={2}>\n          <Typography\n            variant=\"body2\"\n            sx={{\n              textAlign: 'center',\n              padding: '4px 8px 8px'\n            }}\n          >\n            {text || translate('auth.message.choose_pod_provider')}\n          </Typography>\n        </Box>\n        <Box m={2}>\n          <List sx={{ paddingTop: 0, paddingBottom: 0 }}>\n            {podProviders.map((podProvider, i) => (\n              <Fragment key={i}>\n                <Divider />\n                <ListItem>\n                  <ListItemButton\n                    onClick={() =>\n                      login({\n                        issuer: podProvider['apods:baseUrl'],\n                        redirect: redirectUrl || undefined,\n                        isSignup\n                      })\n                    }\n                  >\n                    <ListItemAvatar>\n                      <Avatar>\n                        <StorageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={new URL(podProvider['apods:baseUrl']).host}\n                      secondary={podProvider['apods:area']}\n                    />\n                  </ListItemButton>\n                </ListItem>\n              </Fragment>\n            ))}\n          </List>\n        </Box>\n      </Card>\n    </Box>\n  );\n};\n\ntype Props = {\n  text?: string;\n  customPodProviders: [PodProvider];\n};\n\nexport default PodLoginPageView;\n","import { FunctionComponent, useEffect } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { useDataModels } from '@semapps/semantic-data-provider';\nimport type { Ontology } from '../types';\n\nconst prefix = (uri: string | null, ontologies: [Ontology]) => {\n  if (!uri) return;\n  if (!uri.startsWith('http')) return uri; // If it is already prefixed\n  const ontology = ontologies.find(o => uri.startsWith(o.url));\n  return ontology && uri.replace(ontology.url, ontology.prefix + ':');\n};\n\n/**\n * Look for the `type` search param and compare it with React-Admin resources\n * Can be a full or a prefixed URI, in which case the component looks in the `ontologies` prop\n * If a matching resource is found, redirect to the resource's list page\n * If a `uri` search param is passed, redirect to the resource's show page\n * If no matching types are found, simply redirect to the homepage\n * This page is called from the data browser in the Pod provider\n */\nconst RedirectPage: FunctionComponent<Props> = ({ ontologies }) => {\n  const dataModels = useDataModels();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    if (dataModels) {\n      const prefixedType = prefix(searchParams.get('type'), ontologies);\n      const resource =\n        prefixedType &&\n        Object.keys(dataModels).find(key => dataModels[key].types && dataModels[key].types.includes(prefixedType));\n      if (searchParams.has('uri')) {\n        navigate(\n          `/${resource}/${encodeURIComponent(searchParams.get('uri') as string)}${\n            searchParams.get('mode') === 'show' ? '/show' : ''\n          }`\n        );\n      } else if (resource) {\n        navigate(`/${resource}`);\n      } else {\n        navigate('/');\n      }\n    }\n  }, [dataModels, searchParams, navigate]);\n\n  return null;\n};\n\ntype Props = {\n  ontologies: [Ontology];\n};\n\nexport default RedirectPage;\n"],"names":[],"version":3,"file":"index.es.js.map"}